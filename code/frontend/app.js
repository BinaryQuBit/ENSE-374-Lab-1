// Calling Dependencies
const express = require("express");
const mongoose = require('mongoose');
const session = require("express-session")
const passport = require("passport")
const passportLocalMongoose = require("passport-local-mongoose")
require("dotenv").config();

// This is a canonical alias to make your life easier, like jQuery to $.
const app = express();

// Using EJS Template to render view
app.set("view engine", "ejs");

// Host static resources, like js and css ~ also included html since it worked
app.use(express.static("public"));

// Configure express to access variables in req.body object when submitting forms
app.use(express.urlencoded({ extended: true }));

// A common localhost test port
const port = 3000;

// Simple server operation
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});

// Connecting local DB
mongoose.connect( "mongodb://localhost:27017/testdb", 
                { useNewUrlParser: true, 
                  useUnifiedTopology: true});

// Schema for tasks: Note ID is generated by DB
const taskSchema = new mongoose.Schema ({
    "creator": String,
    "claimer": String,
    "taskText": String,
    "state": String
});

// Schema for saving users
const userSchema = new mongoose.Schema ({
    "username" : String,
    "password" : String
});

// Plugins extend Schema functionality
userSchema.plugin(passportLocalMongoose);

// Creating models to be read, write to, update and delete: CRUD
const Task = mongoose.model ("Task", taskSchema);
const User = mongoose.model ( "User", userSchema );

// Strategy
passport.use(User.createStrategy());
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());

// Session Creation
app.use(session({
    secret: process.env.SECRET,
    resave: false,
    saveUninitialized: false
}));

// Initializing Passport in the app
app.use (passport.initialize());

// Initializing Session in the app
app.use (passport.session());

//////////////////////////////////////// Getting Login Page ////////////////////////////////////////
app.get("/", async (req, res) => {
    res.render("loginSignup.ejs")
});

//////////////////////////////////////// Getting Todo Page ////////////////////////////////////////
app.get( "/todo", async( req, res ) => {
    // If authenticated
    if ( req.isAuthenticated() )
    {
        try
        {
            globalLoginEmail = req.user.username;
            const tasks = await Task.find();
            const unclaimedCurrentUserTasks = [];
            const unclaimedDifferentUserTasks = [];
            const createdCurrentUserClaimedCurrentUserTasks = [];
            const createdDifferentUserClaimedDifferentUserTasks = [];
            const createdCurrentUserClaimedDifferentUserTasks = [];
            const createdDifferentUserClaimedCurrentUserTasks = [];
            const createdCurrentUserFinishedCurrentUserTasks = [];
            const createdDifferentUserFinishedDifferentUserTasks = [];
            const createdCurrentUserFinishedDifferentUserTasks = [];
            const createdDifferentUserFinishedCurrentUserTasks = [];
  
            // Distribute the tasks to corresponding arrays
            tasks.forEach(task => {
                if (task.creator === globalLoginEmail)
                {
                    if (task.state === 'unclaimed')
                    {
                        unclaimedCurrentUserTasks.push(task);
                    }
                    else if (task.claimer === globalLoginEmail)
                    {
                        if (task.state === 'claimed')
                        {
                            createdCurrentUserClaimedCurrentUserTasks.push(task);
                        }
                        else if (task.state === 'finished')
                        {
                            createdCurrentUserFinishedCurrentUserTasks.push(task);
                        }
                    }
                    else
                    {
                        if (task.state === 'claimed')
                        {
                            createdCurrentUserClaimedDifferentUserTasks.push(task);
                        } 
                        else if (task.state === 'finished')
                        {
                            createdCurrentUserFinishedDifferentUserTasks.push(task);
                        }
                    }
                } 
                else 
                {
                    if (task.state === 'unclaimed')
                    {
                        unclaimedDifferentUserTasks.push(task);
                    } 
                    else if (task.claimer === globalLoginEmail)
                    {
                        if (task.state === 'claimed')
                        {
                            createdDifferentUserClaimedCurrentUserTasks.push(task);
                        }
                        else if (task.state === 'finished')
                        {
                            createdDifferentUserFinishedCurrentUserTasks.push(task);
                        }
                    }
                    else
                    {
                        if (task.state === 'claimed')
                        {
                            createdDifferentUserClaimedDifferentUserTasks.push(task);
                        } 
                        else if (task.state === 'finished')
                        {
                            createdDifferentUserFinishedDifferentUserTasks.push(task);
                        }
                    }
                }
            });
  
            // Render all the components
            res.render("todo.ejs", {
                username: globalLoginEmail,
                unclaimedCurrentUser: unclaimedCurrentUserTasks,
                unclaimedDifferentUser: unclaimedDifferentUserTasks,
                createdCurrentUserClaimedCurrentUser: createdCurrentUserClaimedCurrentUserTasks,
                createdDifferentUserClaimedDifferentUser: createdDifferentUserClaimedDifferentUserTasks,
                createdCurrentUserClaimedDifferentUser: createdCurrentUserClaimedDifferentUserTasks,
                createdDifferentUserClaimedCurrentUser: createdDifferentUserClaimedCurrentUserTasks,
                createdCurrentUserFinishedCurrentUser: createdCurrentUserFinishedCurrentUserTasks,
                createdDifferentUserFinishedDifferentUser: createdDifferentUserFinishedDifferentUserTasks,
                createdCurrentUserFinishedDifferentUser: createdCurrentUserFinishedDifferentUserTasks,
                createdDifferentUserFinishedCurrentUser: createdDifferentUserFinishedCurrentUserTasks
            });
        }
        catch (err)
        {
            console.error("Error in updatetodo: ", err);
       }
    }
    else
    {
        console.log( "was not authorized." );
        res.redirect( "/" );
    }
});

////////////////////////////////////////////// Log Out ///////////////////////////////////////////
app.get('/logout', function(req, res, next)
{
    req.logout(function(err)
    {
        if (err)
        { 
            return next(err); 
        }
        res.redirect('/');
    });
});

/////////////////////////////////////////// Login Page ///////////////////////////////////////////
app.post( "/login", ( req, res ) => {
    const user = new User 
    ({
        username: req.body.username,
        password: req.body.password
    });
    req.login ( user, ( err ) => {
        if ( err )
        {
            console.log( err );
            res.redirect( "/" );
        } 
        else 
        {
            passport.authenticate( "local" )( req, res, () => {
                res.redirect( "/todo" ); 
            });
        }
    });
});

///////////////////////////////////////// Register Page //////////////////////////////////////////
app.post( "/register", (req, res) => {
    User.register({ username : req.body.username }, req.body.password, ( err, user ) => {
        if ( err )
        {
            console.log( err );
            res.redirect( "/" );
        }
        else
        {
            passport.authenticate( "local" )( req, res, () => {
                res.redirect( "/todo" );
            });
        }
    });
});

//////////////////////////////////////////// Add Task ////////////////////////////////////////////
app.post('/addTask', async (req, res) => {
    try
    {
        // Handle empty input
        if (req.body.addTask === "")
        {
            console.log("Task can't be empty");
        }

        // Create a new task object
        const newTask = new Task({
            creator: req.user.username,
            claimer: "",
            taskText: req.body.addTask,
            state: "unclaimed"
        });

        // Save it
        await newTask.save();

        // Redirect it to the same page
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Add Task: ", err);
    }
});

/////////////////////////////////////////// Claim Task ///////////////////////////////////////////
app.post('/claim', async (req, res) => {
    try
    {
        // Parse this name "_id" from the ejs that corresponds to the value 
        const taskId = req.body.taskId;

        // Update the task by _id and set new values
        await Task.updateOne
        (
            // Update this id
            { _id: taskId },
            {
                // and set it to these values
                $set:
                {
                    state: "claimed",
                    claimer: req.user.username
                }
            }
        );
        // Redirect back to the same page if the update was successful
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Claim Task: ", err);
    }
});

////////////////////////////////////// Abandon/Complete Task /////////////////////////////////////
app.post('/abandonorcomplete', async (req, res) => {
    try
    {
        // Parse this name "_id" from the ejs that corresponds to the value 
        const taskId = req.body.taskId;

        // Extracting the state of the checkbox
        const checkboxChecked = req.body.checkboxState;

        // If checked
        if (checkboxChecked)
        {
            // update the first
            await Task.updateOne
            (
                // by finding id
                { _id: taskId },

                // and setting them to these values
                {
                    $set:
                    { 
                        state: 'finished',
                    }
                }
            );
        } 

        // else of checkbox is not checked
        else
        {
            // find by id and update to these values
            await Task.updateOne
            (
                { _id: taskId },
                {
                    $set: 
                    {
                        state: 'unclaimed', 
                        claimer: '' 
                    }
                }
            );
        }

        // Redirect tback to the same page
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Abandon/Complete Task: ", err);
    }
});

////////////////////////////////////////// Unfinish Task /////////////////////////////////////////
app.post('/unfinish', async (req, res) => {
    try
    {
        // Parse this name "_id" from the ejs that corresponds to the value 
        const taskId = req.body.taskId;

        // Extracting the state of the checkbox
        const checkboxChecked = req.body.checkboxChecked;

        // if checked
        if (checkboxChecked)
        {
            // update the first one by finding id and setting state to claimed
            await Task.updateOne
            (
                { _id: taskId }, 
                {
                    $set:
                    {
                        state: 'claimed'
                    }
                }
            );
        }

        // Redirect back to same page
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in unfinish Task: ", err);
    }
});

//////////////////////////////////////////// Purge Task //////////////////////////////////////////
app.post('/purge', async (req, res) => {
    try
    {
        // fetch the data with finished and delete all
        await Task.deleteMany({ state: "finished" });

        // redirect back to todo
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Purge Task: ", err);
    }
});